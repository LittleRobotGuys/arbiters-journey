//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Movement.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Movement : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Movement()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Movement"",
    ""maps"": [
        {
            ""name"": ""MovementMap"",
            ""id"": ""f26043f0-d821-4f33-8c01-e851c365f58b"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Button"",
                    ""id"": ""1c18b00a-526a-4a78-878a-abbf8714ad3f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Action"",
                    ""type"": ""Button"",
                    ""id"": ""e03fe710-b3cf-4dfe-8e57-62c48a388fc0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Special"",
                    ""type"": ""Button"",
                    ""id"": ""6424b9d8-f8b9-46d6-b9cd-797636567297"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Inspect"",
                    ""type"": ""Button"",
                    ""id"": ""9149da67-c10c-4376-a48d-10ae7a4ebe4c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0d5dd692-cbcf-42ee-91af-331e5fb01361"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": ""Normalize(max=1)"",
                    ""groups"": ""Windoze"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""df5db931-fe00-4c3d-935b-5b02f1d6e8ac"",
                    ""path"": ""<Touchscreen>/touch0/tap"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f9603783-980e-4b3e-9991-e3632124d380"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Press,Tap"",
                    ""processors"": ""Normalize(max=1)"",
                    ""groups"": """",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4d26bbf3-afeb-47a6-ae7f-5d7f4bfd1959"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": ""Hold"",
                    ""processors"": ""Normalize(max=1)"",
                    ""groups"": """",
                    ""action"": ""Special"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""350d16bb-a41a-4e89-94e7-bf18a8a4f07f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inspect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c239c1bc-2deb-4d03-9dd4-3c3a2d2855db"",
                    ""path"": ""<Touchscreen>/touch0/tap"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inspect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Windoze"",
            ""bindingGroup"": ""Windoze"",
            ""devices"": []
        }
    ]
}");
        // MovementMap
        m_MovementMap = asset.FindActionMap("MovementMap", throwIfNotFound: true);
        m_MovementMap_Movement = m_MovementMap.FindAction("Movement", throwIfNotFound: true);
        m_MovementMap_Action = m_MovementMap.FindAction("Action", throwIfNotFound: true);
        m_MovementMap_Special = m_MovementMap.FindAction("Special", throwIfNotFound: true);
        m_MovementMap_Inspect = m_MovementMap.FindAction("Inspect", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MovementMap
    private readonly InputActionMap m_MovementMap;
    private IMovementMapActions m_MovementMapActionsCallbackInterface;
    private readonly InputAction m_MovementMap_Movement;
    private readonly InputAction m_MovementMap_Action;
    private readonly InputAction m_MovementMap_Special;
    private readonly InputAction m_MovementMap_Inspect;
    public struct MovementMapActions
    {
        private @Movement m_Wrapper;
        public MovementMapActions(@Movement wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_MovementMap_Movement;
        public InputAction @Action => m_Wrapper.m_MovementMap_Action;
        public InputAction @Special => m_Wrapper.m_MovementMap_Special;
        public InputAction @Inspect => m_Wrapper.m_MovementMap_Inspect;
        public InputActionMap Get() { return m_Wrapper.m_MovementMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementMapActions set) { return set.Get(); }
        public void SetCallbacks(IMovementMapActions instance)
        {
            if (m_Wrapper.m_MovementMapActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_MovementMapActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_MovementMapActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_MovementMapActionsCallbackInterface.OnMovement;
                @Action.started -= m_Wrapper.m_MovementMapActionsCallbackInterface.OnAction;
                @Action.performed -= m_Wrapper.m_MovementMapActionsCallbackInterface.OnAction;
                @Action.canceled -= m_Wrapper.m_MovementMapActionsCallbackInterface.OnAction;
                @Special.started -= m_Wrapper.m_MovementMapActionsCallbackInterface.OnSpecial;
                @Special.performed -= m_Wrapper.m_MovementMapActionsCallbackInterface.OnSpecial;
                @Special.canceled -= m_Wrapper.m_MovementMapActionsCallbackInterface.OnSpecial;
                @Inspect.started -= m_Wrapper.m_MovementMapActionsCallbackInterface.OnInspect;
                @Inspect.performed -= m_Wrapper.m_MovementMapActionsCallbackInterface.OnInspect;
                @Inspect.canceled -= m_Wrapper.m_MovementMapActionsCallbackInterface.OnInspect;
            }
            m_Wrapper.m_MovementMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Action.started += instance.OnAction;
                @Action.performed += instance.OnAction;
                @Action.canceled += instance.OnAction;
                @Special.started += instance.OnSpecial;
                @Special.performed += instance.OnSpecial;
                @Special.canceled += instance.OnSpecial;
                @Inspect.started += instance.OnInspect;
                @Inspect.performed += instance.OnInspect;
                @Inspect.canceled += instance.OnInspect;
            }
        }
    }
    public MovementMapActions @MovementMap => new MovementMapActions(this);
    private int m_WindozeSchemeIndex = -1;
    public InputControlScheme WindozeScheme
    {
        get
        {
            if (m_WindozeSchemeIndex == -1) m_WindozeSchemeIndex = asset.FindControlSchemeIndex("Windoze");
            return asset.controlSchemes[m_WindozeSchemeIndex];
        }
    }
    public interface IMovementMapActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnAction(InputAction.CallbackContext context);
        void OnSpecial(InputAction.CallbackContext context);
        void OnInspect(InputAction.CallbackContext context);
    }
}
